//@version=5


currentK = input.float(0, title = "Current K")
currentD = input.float(0, title = "Current D")
currentConversion = input.float(0, title = "Current Conversion")
currentBase = input.float(0, title = "Current Base")
currentLeadA = input.float(0, title = "Current LeadA")
currentLeadB = input.float(0, title = "Current LeadB")
currentClose = input.float(0, title = "Current Close")

// Ichimoku

indicator(title="Ichimoku Cloud", shorttitle="Ichimoku", overlay=true)
conversionPeriods = input.int(9, minval=1, title="Conversion Line Length")
basePeriods = input.int(26, minval=1, title="Base Line Length")
laggingSpan2Periods = input.int(52, minval=1, title="Leading Span B Length")
displacement = input.int(26, minval=1, title="Lagging Span")
donchian(len) => math.avg(ta.lowest(len), ta.highest(len))
conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriods)
leadLine1 = math.avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)
plot(conversionLine, color=#2962FF, title="Conversion Line")
plot(baseLine, color=#B71C1C, title="Base Line")
plot(close, offset = -displacement + 1, color=#43A047, title="Lagging Span")
p1 = plot(leadLine1, offset = displacement - 1, color=#A5D6A7,
	 title="Leading Span A")
p2 = plot(leadLine2, offset = displacement - 1, color=#EF9A9A,
	 title="Leading Span B")
plot(leadLine1 > leadLine2 ? leadLine1 : leadLine2, offset = displacement - 1, title = "Kumo Cloud Upper Line", display = display.none)
plot(leadLine1 < leadLine2 ? leadLine1 : leadLine2, offset = displacement - 1, title = "Kumo Cloud Lower Line", display = display.none)
fill(p1, p2, color = leadLine1 > leadLine2 ? color.rgb(67, 160, 71, 90) : color.rgb(244, 67, 54, 90))

// leadA and leadB
var leadA = array.new_float()
var leadB = array.new_float()

array.push(leadA, leadLine1)
array.push(leadB, leadLine2)

outLeadA = close
outLeadB = close

if barstate.islast
	outLeadA := array.get(leadA, array.size(leadA) - displacement)
	outLeadB := array.get(leadB, array.size(leadB) - displacement)
plot(outLeadA, color =  color.rgb(255, 255, 255, 100), title = 'Lead A')
plot(outLeadB, color =  color.rgb(255, 255, 255, 100), title = 'Lead B')

// Stoch RSI
//@version=5
// indicator(title="Stochastic RSI", shorttitle="Stoch RSI", format=format.price, precision=2, timeframe="", timeframe_gaps=true)
smoothK = input.int(3, "K", minval=1)
smoothD = input.int(3, "D", minval=1)
lengthRSI = input.int(14, "RSI Length", minval=1)
lengthStoch = input.int(14, "Stochastic Length", minval=1)
src = input(close, title="RSI Source")
rsi1 = ta.rsi(src, lengthRSI)
k = ta.sma(ta.stoch(rsi1, rsi1, rsi1, lengthStoch), smoothK)
d = ta.sma(k, smoothD)

// plot(k, "K", color=#2962FF)
// plot(d, "D", color=#FF6D00)
// h0 = hline(80, "Upper Band", color=#787B86)
// hline(50, "Middle Band", color=color.new(#787B86, 50))
// h1 = hline(20, "Lower Band", color=#787B86)
// fill(h0, h1, color=color.rgb(33, 150, 243, 90), title="Background")

// Similar

var dateString = array.new_string()
var leadAArray = array.new_float()
var leadBArray = array.new_float()
var similarDayCount = 0
var closeArray  = array.new_float()
var increase1 = 0
var increase2 = 0
var increase3 = 0
var decrease1 = 0
var decrease2 = 0
var decrease3 = 0
var float closeToCompare = 0

similarLine = low

array.push(closeArray, close)
array.push(leadAArray, leadLine1)
array.push(leadBArray, leadLine2)


similarKD = currentK > currentD ? k > d : k < d
similarKRange = currentK < 20 ? k < 20 : currentK > 80 ? k > 80 : k >= 20 and k <= 80
similarCB = currentConversion > currentBase ? conversionLine > baseLine : conversionLine < baseLine
availableCloud = array.size(leadAArray) > displacement ? true : false

similarCloud = not availableCloud ? false : (currentClose > currentLeadA and currentClose > currentLeadB) ? (close > array.get(leadAArray, array.size(leadAArray) - displacement) and close > array.get(leadBArray, array.size(leadBArray) - displacement)) : (currentClose < currentLeadA and currentClose < currentLeadB) ? (close < array.get(leadAArray, array.size(leadAArray) - displacement) and close < array.get(leadBArray, array.size(leadBArray) - displacement)) : ((close < array.get(leadAArray, array.size(leadAArray) - displacement) and close > array.get(leadBArray, array.size(leadBArray) - displacement)) or (close > array.get(leadAArray, array.size(leadAArray) - displacement) and close < array.get(leadBArray, array.size(leadBArray) - displacement)))

if(similarCloud and similarCB and similarKD and similarKRange and currentClose != 0)
    //array.push(dates, str.format("{0,date,HH:mm:ss yyyy.MM.dd}", time))
    similarDayCount := similarDayCount + 1

    if(closeToCompare != 0 and array.size(closeArray) >=3)
        similarLine := high
        if closeToCompare > array.get(closeArray, 0)
            decrease1 := decrease1+1
        else
            increase1 := increase1 +1
        if closeToCompare > array.get(closeArray, 1)
            decrease2 := decrease2+1
        else
            increase2 := increase2 +1
        if closeToCompare > array.get(closeArray, 2)
            decrease3 := decrease3+1
        else
            increase3 := increase3 +1


    closeToCompare:= close
    closeArray.clear()

bgcolor(similarLine == high ? color.orange: na)

increase1plot = high
increase2plot = high
increase3plot = high
decrease1plot = high
decrease2plot = high
decrease3plot = high

if barstate.islast
	increase1plot := high - increase1
	increase2plot := high - increase2
	increase3plot := high - increase3
	decrease1plot := high - decrease1
	decrease2plot := high - decrease2
	decrease3plot := high - decrease3


plot(increase1plot, title = "increase1plot", color =  color.rgb(255, 255, 255, 100))
plot(increase2plot, title = "increase2plot", color =  color.rgb(255, 255, 255, 100))
plot(increase3plot, title = "increase3plot", color =  color.rgb(255, 255, 255, 100))
plot(decrease1plot, title = "decrease1plot", color =  color.rgb(255, 255, 255, 100))
plot(decrease2plot, title = "decrease2plot", color =  color.rgb(255, 255, 255, 100))
plot(decrease3plot, title = "decrease3plot", color =  color.rgb(255, 255, 255, 100))
plot(similarLine, title = "similarLine", color =  color.rgb(255, 255, 255, 100))


